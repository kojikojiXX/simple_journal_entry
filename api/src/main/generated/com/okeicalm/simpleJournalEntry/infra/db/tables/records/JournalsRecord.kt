/*
 * This file is generated by jOOQ.
 */
package com.okeicalm.simpleJournalEntry.infra.db.tables.records


import com.okeicalm.simpleJournalEntry.infra.db.tables.Journals

import java.time.LocalDate

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JournalsRecord() : UpdatableRecordImpl<JournalsRecord>(Journals.JOURNALS), Record3<Long?, LocalDate?, Long?> {

    var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var incurredOn: LocalDate?
        set(value): Unit = set(1, value)
        get(): LocalDate? = get(1) as LocalDate?

    var userId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, LocalDate?, Long?> = super.fieldsRow() as Row3<Long?, LocalDate?, Long?>
    override fun valuesRow(): Row3<Long?, LocalDate?, Long?> = super.valuesRow() as Row3<Long?, LocalDate?, Long?>
    override fun field1(): Field<Long?> = Journals.JOURNALS.ID
    override fun field2(): Field<LocalDate?> = Journals.JOURNALS.INCURRED_ON
    override fun field3(): Field<Long?> = Journals.JOURNALS.USER_ID
    override fun component1(): Long? = id
    override fun component2(): LocalDate? = incurredOn
    override fun component3(): Long? = userId
    override fun value1(): Long? = id
    override fun value2(): LocalDate? = incurredOn
    override fun value3(): Long? = userId

    override fun value1(value: Long?): JournalsRecord {
        this.id = value
        return this
    }

    override fun value2(value: LocalDate?): JournalsRecord {
        this.incurredOn = value
        return this
    }

    override fun value3(value: Long?): JournalsRecord {
        this.userId = value
        return this
    }

    override fun values(value1: Long?, value2: LocalDate?, value3: Long?): JournalsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised JournalsRecord
     */
    constructor(id: Long? = null, incurredOn: LocalDate? = null, userId: Long? = null): this() {
        this.id = id
        this.incurredOn = incurredOn
        this.userId = userId
    }
}
